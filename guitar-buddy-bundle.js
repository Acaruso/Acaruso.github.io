/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/App.ts":
/*!********************!*\
  !*** ./src/App.ts ***!
  \********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.App = void 0;\nconst Gfx_1 = __webpack_require__(/*! ./Gfx */ \"./src/Gfx.ts\");\nconst State_1 = __webpack_require__(/*! ./State */ \"./src/State.ts\");\nconst Ui_1 = __webpack_require__(/*! ./Ui */ \"./src/Ui.ts\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\nclass App {\n    constructor() {\n        this.canvas = document.getElementById(\"myCanvas\");\n        this.canvas.width = constants_1.constants.canvasWidth;\n        this.canvas.height = constants_1.constants.canvasHeight;\n        this.gfx = new Gfx_1.Gfx();\n        this.state = new State_1.State();\n        this.ui = new Ui_1.Ui(this.gfx, this.state);\n        setInterval(() => this.tick(), 1000 / 30);\n    }\n    tick() {\n        this.ui.tick();\n    }\n}\nexports.App = App;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/App.ts?");

/***/ }),

/***/ "./src/FretboardModel.ts":
/*!*******************************!*\
  !*** ./src/FretboardModel.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AbsoluteRelativeMode = exports.GlobalLocalMode = exports.Dir = exports.FretboardModel = exports.Cell = void 0;\nconst util_1 = __webpack_require__(/*! ./util */ \"./src/util.ts\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\nconst notesDict_1 = __webpack_require__(/*! ./notesDict */ \"./src/notesDict.ts\");\nvar Dir;\n(function (Dir) {\n    Dir[Dir[\"Up\"] = 1] = \"Up\";\n    Dir[Dir[\"Down\"] = 2] = \"Down\";\n    Dir[Dir[\"Left\"] = 3] = \"Left\";\n    Dir[Dir[\"Right\"] = 4] = \"Right\";\n})(Dir || (Dir = {}));\nexports.Dir = Dir;\nvar GlobalLocalMode;\n(function (GlobalLocalMode) {\n    GlobalLocalMode[GlobalLocalMode[\"Local\"] = 1] = \"Local\";\n    GlobalLocalMode[GlobalLocalMode[\"Global\"] = 2] = \"Global\";\n})(GlobalLocalMode || (GlobalLocalMode = {}));\nexports.GlobalLocalMode = GlobalLocalMode;\nvar AbsoluteRelativeMode;\n(function (AbsoluteRelativeMode) {\n    AbsoluteRelativeMode[AbsoluteRelativeMode[\"Absolute\"] = 1] = \"Absolute\";\n    AbsoluteRelativeMode[AbsoluteRelativeMode[\"Relative\"] = 2] = \"Relative\";\n})(AbsoluteRelativeMode || (AbsoluteRelativeMode = {}));\nexports.AbsoluteRelativeMode = AbsoluteRelativeMode;\nvar NoteDisplayMode;\n(function (NoteDisplayMode) {\n    NoteDisplayMode[NoteDisplayMode[\"String\"] = 1] = \"String\";\n    NoteDisplayMode[NoteDisplayMode[\"AbsoluteNumber\"] = 2] = \"AbsoluteNumber\";\n    NoteDisplayMode[NoteDisplayMode[\"RelativeNumber\"] = 3] = \"RelativeNumber\";\n})(NoteDisplayMode || (NoteDisplayMode = {}));\n// use this functionto get next NoteDisplayMode:\n// function getNextNoteDisplayMode(m: NoteDisplayMode)\nclass Cell {\n    constructor(note, noteString) {\n        this.toggled = false;\n        this.color = constants_1.constants.black;\n        this.ring = false;\n        this.note = note;\n        this.noteString = noteString;\n    }\n}\nexports.Cell = Cell;\nclass FretboardModel {\n    constructor(numRows, numCols) {\n        this.selected = false;\n        this.selectedRow = 0;\n        this.selectedCol = 0;\n        this.secondaryCursor = false;\n        this.secondaryCursorRow = 0;\n        this.secondaryCursorCol = 0;\n        this.secondaryToPrimaryInterval = 0;\n        this.globalLocalMode = GlobalLocalMode.Local;\n        this.absoluteRelativeMode = AbsoluteRelativeMode.Absolute;\n        this.notes = notesDict_1.notesDict;\n        // \"strang\" === guitar string\n        // not to be confused with \"string\" which is a data type\n        this.strangs = [\n            31,\n            26,\n            22,\n            17,\n            12,\n            7 // low E\n        ];\n        this.numRows = numRows;\n        this.numCols = numCols;\n        this.cells = [];\n        for (let row = 0; row < numRows; row++) {\n            this.cells.push([]);\n            for (let col = 0; col < numCols; col++) {\n                const note = this.strangs[row] + col + 1;\n                this.cells[row].push(new Cell(note, this.noteToString(note)));\n            }\n        }\n    }\n    toggleGlobalLocalMode() {\n        if (this.globalLocalMode === GlobalLocalMode.Local) {\n            this.globalLocalMode = GlobalLocalMode.Global;\n        }\n        else {\n            this.globalLocalMode = GlobalLocalMode.Local;\n        }\n    }\n    toggleAbsoluteRelativeMode() {\n        if (this.absoluteRelativeMode === AbsoluteRelativeMode.Absolute) {\n            this.absoluteRelativeMode = AbsoluteRelativeMode.Relative;\n        }\n        else {\n            this.absoluteRelativeMode = AbsoluteRelativeMode.Absolute;\n        }\n    }\n    getAbsoluteRelativeMode() {\n        return this.absoluteRelativeMode;\n    }\n    getCell(row, col) {\n        return this.cells[row][col];\n    }\n    noteToStringFull(note) {\n        if (!this.notes.hasOwnProperty(String(note))) {\n            console.log(`ERROR: noteToStringFull(${note}) note out of range`);\n        }\n        return this.notes[String(note)];\n    }\n    noteToString(note) {\n        return this.noteToStringFull(note).replace(/[0-9]/g, \"\");\n    }\n    strangFretToNote(strang, fret) {\n        return this.strangs[strang] + (fret + 1);\n    }\n    setToggle(row, col) {\n        if (this.globalLocalMode === GlobalLocalMode.Local) {\n            this.setToggleLocal(row, col);\n            if (!this.isToggled(row, col)) {\n                this.setColorLocal(constants_1.constants.black, row, col);\n            }\n            if (this.secondaryCursor) {\n                this.setToggleLocal(this.secondaryCursorRow, this.secondaryCursorCol);\n                if (!this.isToggled(this.secondaryCursorRow, this.secondaryCursorCol)) {\n                    this.setColorLocal(constants_1.constants.black, this.secondaryCursorRow, this.secondaryCursorCol);\n                }\n            }\n        }\n        else if (this.globalLocalMode === GlobalLocalMode.Global) {\n            this.setToggleGlobal(row, col);\n            if (!this.isToggled(row, col)) {\n                this.setColorGlobal(constants_1.constants.black, row, col);\n            }\n        }\n    }\n    setToggleLocal(row, col) {\n        this.cells[row][col].toggled = !this.cells[row][col].toggled;\n    }\n    setToggleGlobal(row, col) {\n        const newToggleValue = !this.cells[row][col].toggled;\n        const base = this.cells[row][col].note % 12;\n        for (const row of this.cells) {\n            for (let cell of row) {\n                if (cell.note % 12 === base) {\n                    cell.toggled = newToggleValue;\n                }\n            }\n        }\n    }\n    isToggled(row, col) {\n        return this.cells[row][col].toggled;\n    }\n    untoggleAll() {\n        for (const row of this.cells) {\n            for (const cell of row) {\n                cell.toggled = false;\n                cell.color = constants_1.constants.black;\n            }\n        }\n        this.unselect();\n    }\n    setColor(color, row, col) {\n        if (this.globalLocalMode === GlobalLocalMode.Local) {\n            this.setColorLocal(color, row, col);\n        }\n        else if (this.globalLocalMode === GlobalLocalMode.Global) {\n            this.setColorGlobal(color, row, col);\n        }\n    }\n    setColorLocal(color, row, col) {\n        this.cells[row][col].color = color;\n    }\n    setColorGlobal(color, row, col) {\n        const base = this.cells[row][col].note % 12;\n        for (const row of this.cells) {\n            for (let cell of row) {\n                if (cell.note % 12 === base) {\n                    cell.color = color;\n                }\n            }\n        }\n    }\n    // set the color of all currently toggled notes\n    setColorAllToggled(color) {\n        for (const row of this.cells) {\n            for (let cell of row) {\n                if (cell.toggled) {\n                    cell.color = color;\n                }\n            }\n        }\n    }\n    getColor(row, col) {\n        return this.cells[row][col].color;\n    }\n    setRing(row, col) {\n        if (this.globalLocalMode === GlobalLocalMode.Local) {\n            this.setRingLocal(row, col);\n        }\n        else if (this.globalLocalMode === GlobalLocalMode.Global) {\n            this.setRingGlobal(row, col);\n        }\n    }\n    setRingLocal(row, col) {\n        const curCell = this.cells[row][col];\n        curCell.ring = !curCell.ring;\n    }\n    setRingGlobal(row, col) {\n        const curCell = this.cells[row][col];\n        const baseNote = curCell.note % 12;\n        const newRing = !curCell.ring;\n        for (const row of this.cells) {\n            for (let cell of row) {\n                if (cell.note % 12 === baseNote) {\n                    cell.ring = newRing;\n                }\n            }\n        }\n    }\n    setSelected(row, col) {\n        this.selected = true;\n        if (this.secondaryCursor) {\n            const rowDelta = row - this.selectedRow;\n            const newPrimaryNote = this.strangFretToNote(row, col);\n            const targetNote = newPrimaryNote + this.secondaryToPrimaryInterval;\n            this.secondaryCursorRow += rowDelta;\n            for (let i = 0; i < this.numCols; i++) {\n                if (this.strangFretToNote(this.secondaryCursorRow, i) === targetNote) {\n                    this.secondaryCursorCol = i;\n                    break;\n                }\n            }\n        }\n        this.selectedRow = row;\n        this.selectedCol = col;\n    }\n    isSelected(row, col) {\n        return (this.selected\n            && this.selectedRow === row\n            && this.selectedCol === col);\n    }\n    unselect() {\n        this.selected = false;\n        this.secondaryCursor = false;\n    }\n    moveSelected(dir) {\n        const { newRow, newCol } = move(dir, this.selectedRow, this.selectedCol, this.numRows, this.numCols);\n        this.setSelected(newRow, newCol);\n    }\n    setSecondaryCursor(row, col) {\n        if (this.selected\n            && !(row === this.selectedRow\n                && col === this.selectedCol)) {\n            this.secondaryCursor = true;\n            this.secondaryCursorRow = row;\n            this.secondaryCursorCol = col;\n            const primaryNote = this.strangFretToNote(this.selectedRow, this.selectedCol);\n            const secondaryNote = this.strangFretToNote(this.secondaryCursorRow, this.secondaryCursorCol);\n            this.secondaryToPrimaryInterval = secondaryNote - primaryNote;\n        }\n    }\n    isSecondaryCursor(row, col) {\n        return (this.secondaryCursor\n            && this.secondaryCursorRow === row\n            && this.secondaryCursorCol === col);\n    }\n    moveToggle(dir, row, col) {\n        if (!this.isToggled(this.selectedRow, this.selectedCol)) {\n            return;\n        }\n        const { newRow, newCol } = move(dir, row, col, this.numRows, this.numCols);\n        if (this.getCell(newRow, newCol).toggled) {\n            return;\n        }\n        this.setToggle(row, col);\n        this.setToggle(newRow, newCol);\n        this.setSelected(newRow, newCol);\n    }\n    moveToggleByOctave(dir, row, col) {\n        if (!this.isToggled(this.selectedRow, this.selectedCol)\n            || (dir !== Dir.Left && dir !== Dir.Right)) {\n            return;\n        }\n        const { newRow, newCol } = move(dir, row, col, this.numRows, this.numCols, 12);\n        if (this.getCell(newRow, newCol).toggled) {\n            return;\n        }\n        this.setToggle(row, col);\n        this.setToggle(newRow, newCol);\n        this.setSelected(newRow, newCol);\n    }\n    moveToggleByString(dir, row, col) {\n        if (!this.isToggled(this.selectedRow, this.selectedCol)\n            || (dir !== Dir.Up && dir !== Dir.Down)) {\n            return;\n        }\n        const { newRow, newCol } = move(dir, row, col, this.numRows, this.numCols);\n        if (newRow === row && newCol === col) {\n            return;\n        }\n        let curNote = this.getCell(row, col).note;\n        const notePositions = this.findNotePositions(curNote, newRow);\n        const newNewCol = notePositions[0];\n        this.setToggle(row, col);\n        this.setToggle(newRow, newNewCol);\n        this.setSelected(newRow, newNewCol);\n    }\n    findNotePositions(note, strang) {\n        const base = note % 12;\n        let strangNote = this.strangs[strang];\n        let res = [];\n        for (let i = 0; i < this.numCols; i++, strangNote++) {\n            if (strangNote % 12 === base) {\n                if ((i - 1) >= 0) {\n                    res.push(i - 1);\n                }\n            }\n        }\n        return res;\n    }\n}\nexports.FretboardModel = FretboardModel;\nfunction move(dir, row, col, numRows, numCols, inc = 1) {\n    let newRow = row;\n    let newCol = col;\n    switch (dir) {\n        case Dir.Up:\n            newRow -= inc;\n            break;\n        case Dir.Down:\n            newRow += inc;\n            break;\n        case Dir.Left:\n            newCol -= inc;\n            break;\n        case Dir.Right:\n            newCol += inc;\n            break;\n    }\n    if (!(0, util_1.inRange)(newRow, 0, numRows) || !(0, util_1.inRange)(newCol, 0, numCols)) {\n        return { newRow: row, newCol: col };\n    }\n    return { newRow, newCol };\n}\nfunction getNextNoteDisplayMode(m) {\n    switch (m) {\n        case NoteDisplayMode.String:\n            return NoteDisplayMode.AbsoluteNumber;\n        case NoteDisplayMode.AbsoluteNumber:\n            return NoteDisplayMode.RelativeNumber;\n        case NoteDisplayMode.RelativeNumber:\n            return NoteDisplayMode.String;\n    }\n}\n\n\n//# sourceURL=webpack://guitar-buddy/./src/FretboardModel.ts?");

/***/ }),

/***/ "./src/Gfx.ts":
/*!********************!*\
  !*** ./src/Gfx.ts ***!
  \********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Gfx = void 0;\nconst textConstants_1 = __webpack_require__(/*! ./textConstants */ \"./src/textConstants.ts\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\nclass Gfx {\n    constructor() {\n        this.canvas = document.getElementById(\"myCanvas\");\n        this.ctx = this.canvas.getContext(\"2d\");\n        this.queue = [];\n    }\n    push(command, z) {\n        this.queue.push({ command, z });\n    }\n    drawRect(rect, z = 0) {\n        const command = (ctx) => {\n            const color = rect.color ? rect.color : constants_1.constants.black;\n            // 0.0 == transparent, 1.0 == solid\n            const alpha = rect.alpha ? rect.alpha : 1.0;\n            this.ctx.globalAlpha = alpha;\n            ctx.fillStyle = color;\n            ctx.beginPath();\n            ctx.rect(rect.x, rect.y, rect.w, rect.h);\n            ctx.fill();\n            ctx.closePath();\n            this.ctx.globalAlpha = 1.0;\n        };\n        this.push(command, z);\n    }\n    strokeRect(rect, z = 0) {\n        const color = rect.color ? rect.color : constants_1.constants.black;\n        const upperLeft = { x: rect.x, y: rect.y };\n        const upperRight = { x: rect.x + rect.w, y: rect.y };\n        const lowerRight = { x: rect.x + rect.w, y: rect.y + rect.h };\n        const lowerLeft = { x: rect.x, y: rect.y + rect.h };\n        this.drawLine(upperLeft, upperRight, z, color);\n        this.drawLine(upperRight, lowerRight, z, color);\n        this.drawLine(lowerRight, lowerLeft, z, color);\n        this.drawLine(lowerLeft, upperLeft, z, color);\n    }\n    strokeRectHeavy(rect, z = 0) {\n        const color = rect.color ? rect.color : constants_1.constants.black;\n        this.drawLineHeavy({ x: rect.x, y: rect.y }, { x: rect.x + rect.w + 1, y: rect.y }, z, color);\n        this.drawLineHeavy({ x: rect.x + rect.w, y: rect.y }, { x: rect.x + rect.w, y: rect.y + rect.h + 1 }, z, color);\n        this.drawLineHeavy({ x: rect.x + rect.w, y: rect.y + rect.h }, { x: rect.x - 1, y: rect.y + rect.h }, z, color);\n        this.drawLineHeavy({ x: rect.x, y: rect.y + rect.h }, { x: rect.x, y: rect.y - 1 }, z, color);\n    }\n    drawLine(beginCoord, endCoord, z = 0, color = constants_1.constants.black) {\n        const command = (ctx) => {\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.moveTo(beginCoord.x, beginCoord.y);\n            ctx.lineTo(endCoord.x, endCoord.y);\n            ctx.stroke();\n        };\n        this.push(command, z);\n    }\n    drawLineHeavy(beginCoord, endCoord, z = 0, color = constants_1.constants.black) {\n        const command = (ctx) => {\n            ctx.strokeStyle = color;\n            ctx.lineWidth = 2;\n            ctx.beginPath();\n            ctx.moveTo(beginCoord.x, beginCoord.y);\n            ctx.lineTo(endCoord.x, endCoord.y);\n            ctx.stroke();\n        };\n        this.push(command, z);\n    }\n    drawFilledCircle(coord, radius, z = 0, color = constants_1.constants.black) {\n        const command = (ctx) => {\n            ctx.strokeStyle = color;\n            ctx.fillStyle = color;\n            ctx.lineWidth = 1;\n            ctx.beginPath();\n            ctx.arc(coord.x, coord.y, radius, 0, 2 * Math.PI);\n            ctx.fill();\n        };\n        this.push(command, z);\n    }\n    drawOutlinedCircle(coord, radius, lineWidth, z = 0, color = constants_1.constants.black) {\n        const command = (ctx) => {\n            ctx.strokeStyle = color;\n            ctx.lineWidth = lineWidth;\n            ctx.beginPath();\n            ctx.arc(coord.x, coord.y, radius, 0, 2 * Math.PI);\n            ctx.stroke();\n        };\n        this.push(command, z);\n    }\n    drawText(text, size, coord, color = constants_1.constants.black, z = 0) {\n        const command = (ctx) => {\n            ctx.font = `${size}px ${textConstants_1.textConstants.textStyle}`;\n            ctx.fillStyle = color;\n            // coord for fillText(text, coord) is *bottom* left side of text\n            // however, our coord is for *top* left side of text\n            // thus, we need to do coord.y + textConstants.charHeight\n            // ctx.fillText(text, coord.x, coord.y + textConstants.charHeight);\n            ctx.fillText(text, coord.x, coord.y + size);\n        };\n        this.push(command, z);\n    }\n    draw() {\n        this.sortQueue(this.queue);\n        while (this.queue.length > 0) {\n            const elt = this.queue[this.queue.length - 1];\n            elt.command(this.ctx);\n            this.queue.pop();\n        }\n    }\n    sortQueue(queue) {\n        queue.sort((first, second) => {\n            return second.z - first.z;\n        });\n    }\n    clearScreen() {\n        this.drawRect({\n            x: 0,\n            y: 0,\n            w: this.canvas.width,\n            h: this.canvas.height,\n            color: constants_1.constants.white\n        }, -100);\n    }\n}\nexports.Gfx = Gfx;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/Gfx.ts?");

/***/ }),

/***/ "./src/Rect.ts":
/*!*********************!*\
  !*** ./src/Rect.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Rect = void 0;\nclass Rect {\n    constructor() {\n        this.x = 0;\n        this.y = 0;\n        this.w = 0;\n        this.h = 0;\n    }\n}\nexports.Rect = Rect;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/Rect.ts?");

/***/ }),

/***/ "./src/State.ts":
/*!**********************!*\
  !*** ./src/State.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.State = void 0;\nclass State {\n    constructor() {\n        this.mouse = {\n            clicked: false,\n            coord: { x: 0, y: 0 },\n        };\n        this.keyboard = {\n            arrowup: false,\n            arrowdown: false,\n            arrowright: false,\n            arrowleft: false,\n            control: false,\n            shift: false,\n            alt: false,\n            tab: false,\n            backspace: false,\n            space: false,\n            enter: false,\n            escape: false,\n            a: false,\n            b: false,\n            c: false,\n            d: false,\n            e: false,\n            f: false,\n            g: false,\n            h: false,\n            i: false,\n            j: false,\n            k: false,\n            l: false,\n            m: false,\n            n: false,\n            o: false,\n            p: false,\n            q: false,\n            r: false,\n            s: false,\n            t: false,\n            u: false,\n            v: false,\n            w: false,\n            x: false,\n            y: false,\n            z: false,\n        };\n    }\n}\nexports.State = State;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/State.ts?");

/***/ }),

/***/ "./src/Ui.ts":
/*!*******************!*\
  !*** ./src/Ui.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Ui = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./ui_elts/BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nconst FretboardElt_1 = __webpack_require__(/*! ./ui_elts/FretboardElt */ \"./src/ui_elts/FretboardElt.ts\");\nconst NoteStringGameElt_1 = __webpack_require__(/*! ./ui_elts/NoteStringGameElt */ \"./src/ui_elts/NoteStringGameElt.ts\");\nconst IntervalsGameElt_1 = __webpack_require__(/*! ./ui_elts/IntervalsGameElt */ \"./src/ui_elts/IntervalsGameElt.ts\");\nconst StringFretGameElt_1 = __webpack_require__(/*! ./ui_elts/StringFretGameElt */ \"./src/ui_elts/StringFretGameElt.ts\");\nconst FlashcardsGameElt_1 = __webpack_require__(/*! ./ui_elts/FlashcardsGameElt */ \"./src/ui_elts/FlashcardsGameElt.ts\");\nconst NotesSemitoneGameElt_1 = __webpack_require__(/*! ./ui_elts/NotesSemitoneGameElt */ \"./src/ui_elts/NotesSemitoneGameElt.ts\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"./src/constants.ts\");\nconst util_1 = __webpack_require__(/*! ./util */ \"./src/util.ts\");\nclass Ui {\n    constructor(gfx, state) {\n        this.mouseX = 0;\n        this.mouseY = 0;\n        this.gfx = gfx;\n        this.state = state;\n        // create root ui elt\n        this.rootElt = new BaseElt_1.BaseElt(this.gfx, { x: 0, y: 0, w: constants_1.constants.canvasWidth, h: constants_1.constants.canvasHeight });\n        // create event handlers\n        (0, util_1.addHandler)(\"mousedown\", (e) => this.onLeftMBDown(e));\n        (0, util_1.addHandler)(\"mouseup\", (e) => this.onLeftMBUp(e));\n        (0, util_1.addHandler)(\"mousemove\", (e) => {\n            this.mouseX = e.offsetX;\n            this.mouseY = e.offsetY;\n        });\n        (0, util_1.addHandler)(\"keydown\", (e) => {\n            let key = e.key.toLowerCase();\n            console.log(key);\n            if (key === \"arrowdown\"\n                || key === \"arrowup\"\n                || key === \"arrowleft\"\n                || key === \"arrowright\"\n                || (this.state.keyboard[\"control\"] && key !== \"r\")) {\n                e.preventDefault();\n            }\n            if (key === \" \") {\n                key = \"space\";\n            }\n            this.state.keyboard[key] = true;\n            this.onKeyDown(key);\n        });\n        (0, util_1.addHandler)(\"keyup\", (e) => {\n            let key = e.key.toLowerCase();\n            if (key === \" \") {\n                key = \"space\";\n            }\n            this.state.keyboard[key] = false;\n        });\n        // create button onClick handlers\n        (0, util_1.addButtonOnClickHandler)(\"fretboard-button\", () => {\n            this.rootElt.clearChildren();\n            this.rootElt.pushChild(new FretboardElt_1.FretboardElt(this.gfx, { x: 20, y: 30, w: 20, h: 20 }, this.state, 6, 24));\n        });\n        (0, util_1.addButtonOnClickHandler)(\"note-string-game-button\", () => {\n            this.rootElt.clearChildren();\n            this.rootElt.pushChild(new NoteStringGameElt_1.NoteStringGameElt(this.gfx, { x: 20, y: 30, w: 20, h: 20 }));\n        });\n        (0, util_1.addButtonOnClickHandler)(\"string-fret-game-button\", () => {\n            this.rootElt.clearChildren();\n            this.rootElt.pushChild(new StringFretGameElt_1.StringFretGameElt(this.gfx, { x: 20, y: 30, w: 20, h: 20 }));\n        });\n        (0, util_1.addButtonOnClickHandler)(\"interval-game-button\", () => {\n            this.rootElt.clearChildren();\n            this.rootElt.pushChild(new IntervalsGameElt_1.IntervalsGameElt(this.gfx, { x: 20, y: 30, w: 20, h: 20 }));\n        });\n        (0, util_1.addButtonOnClickHandler)(\"notes-in-major-keys-button\", () => {\n            this.rootElt.clearChildren();\n            this.rootElt.pushChild(new FlashcardsGameElt_1.FlashcardsGameElt(this.gfx, { x: 20, y: 30, w: 20, h: 20 }));\n        });\n        (0, util_1.addButtonOnClickHandler)(\"notes-semitones-game-button\", () => {\n            this.rootElt.clearChildren();\n            this.rootElt.pushChild(new NotesSemitoneGameElt_1.NotesSemitoneGameElt(this.gfx, { x: 20, y: 30, w: 20, h: 20 }));\n        });\n        // create FretboardElt as the default UI elt\n        this.rootElt.pushChild(new FretboardElt_1.FretboardElt(this.gfx, { x: 20, y: 30, w: 20, h: 20 }, this.state, 6, 24));\n    }\n    onLeftMBDown(event) {\n        let q = [this.rootElt];\n        let cur = null;\n        let toLeftClick = [];\n        while (q.length !== 0) {\n            cur = q[0];\n            q.shift();\n            if (!(0, util_1.isInsideRect)(this.mouseX, this.mouseY, cur.rect)) {\n                continue;\n            }\n            toLeftClick.push(cur);\n            for (const child of cur.children) {\n                q.push(child);\n            }\n        }\n        for (const elt of toLeftClick) {\n            elt.onLeftMBDown(this.mouseX, this.mouseY);\n        }\n    }\n    onLeftMBUp(event) { }\n    onKeyDown(key) {\n        this.rootElt.onKeyDown(key);\n    }\n    tick() {\n        this.gfx.clearScreen();\n        // recursively draw all children, grandchildren, etc.\n        this.rootElt.onDraw();\n        this.gfx.draw();\n    }\n}\nexports.Ui = Ui;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/Ui.ts?");

/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.constants = void 0;\nconst constants = {\n    canvasWidth: 2000,\n    canvasHeight: 1000,\n    white: \"#FFFFFF\",\n    black: \"#000000\",\n    lightBlue: \"#BDCDFF\",\n    lightGreen: \"#D5E8D4\",\n    red: \"#d72521\",\n    green: \"#429d00\",\n    blue: \"#2180ed\",\n    gray: \"#cccccc\",\n};\nexports.constants = constants;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/constants.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst App_1 = __webpack_require__(/*! ./App */ \"./src/App.ts\");\ndocument.body.onload = () => {\n    const app = new App_1.App();\n};\n\n\n//# sourceURL=webpack://guitar-buddy/./src/index.ts?");

/***/ }),

/***/ "./src/notesDict.ts":
/*!**************************!*\
  !*** ./src/notesDict.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.notesDict = void 0;\nconst notesDict = {\n    \"0\": \"A0\",\n    \"1\": \"A#0\",\n    \"2\": \"B0\",\n    \"3\": \"C0\",\n    \"4\": \"C#0\",\n    \"5\": \"D0\",\n    \"6\": \"D#0\",\n    \"7\": \"E0\",\n    \"8\": \"F0\",\n    \"9\": \"F#0\",\n    \"10\": \"G0\",\n    \"11\": \"G#0\",\n    \"12\": \"A1\",\n    \"13\": \"A#1\",\n    \"14\": \"B1\",\n    \"15\": \"C1\",\n    \"16\": \"C#1\",\n    \"17\": \"D1\",\n    \"18\": \"D#1\",\n    \"19\": \"E1\",\n    \"20\": \"F1\",\n    \"21\": \"F#1\",\n    \"22\": \"G1\",\n    \"23\": \"G#1\",\n    \"24\": \"A2\",\n    \"25\": \"A#2\",\n    \"26\": \"B2\",\n    \"27\": \"C2\",\n    \"28\": \"C#2\",\n    \"29\": \"D2\",\n    \"30\": \"D#2\",\n    \"31\": \"E2\",\n    \"32\": \"F2\",\n    \"33\": \"F#2\",\n    \"34\": \"G2\",\n    \"35\": \"G#2\",\n    \"36\": \"A3\",\n    \"37\": \"A#3\",\n    \"38\": \"B3\",\n    \"39\": \"C3\",\n    \"40\": \"C#3\",\n    \"41\": \"D3\",\n    \"42\": \"D#3\",\n    \"43\": \"E3\",\n    \"44\": \"F3\",\n    \"45\": \"F#3\",\n    \"46\": \"G3\",\n    \"47\": \"G#3\",\n    \"48\": \"A4\",\n    \"49\": \"A#4\",\n    \"50\": \"B4\",\n    \"51\": \"C4\",\n    \"52\": \"C#4\",\n    \"53\": \"D4\",\n    \"54\": \"D#4\",\n    \"55\": \"E4\",\n    \"56\": \"F4\",\n    \"57\": \"F#4\",\n    \"58\": \"G4\",\n    \"59\": \"G#4\",\n    \"60\": \"A5\",\n    \"61\": \"A#5\",\n    \"62\": \"B5\",\n    \"63\": \"C5\",\n    \"64\": \"C#5\",\n    \"65\": \"D5\",\n    \"66\": \"D#5\",\n    \"67\": \"E5\",\n    \"68\": \"F5\",\n    \"69\": \"F#5\",\n    \"70\": \"G5\",\n    \"71\": \"G#5\",\n    \"72\": \"A6\",\n    \"73\": \"A#6\",\n    \"74\": \"B6\",\n    \"75\": \"C6\",\n    \"76\": \"C#6\",\n    \"77\": \"D6\",\n    \"78\": \"D#6\",\n    \"79\": \"E6\",\n    \"80\": \"F6\",\n    \"81\": \"F#6\",\n    \"82\": \"G6\",\n    \"83\": \"G#6\",\n    \"84\": \"A7\",\n    \"85\": \"A#7\",\n    \"86\": \"B7\",\n    \"87\": \"C7\",\n    \"88\": \"C#7\",\n    \"89\": \"D7\",\n    \"90\": \"D#7\",\n    \"91\": \"E7\",\n    \"92\": \"F7\",\n    \"93\": \"F#7\",\n    \"94\": \"G7\",\n    \"95\": \"G#7\",\n    \"96\": \"A8\",\n    \"97\": \"A#8\",\n    \"98\": \"B8\",\n    \"99\": \"C8\",\n    \"100\": \"C#8\",\n    \"101\": \"D8\",\n    \"102\": \"D#8\",\n    \"103\": \"E8\",\n    \"104\": \"F8\",\n    \"105\": \"F#8\",\n    \"106\": \"G8\",\n    \"107\": \"G#8\",\n    \"108\": \"A9\",\n    \"109\": \"A#9\",\n    \"110\": \"B9\",\n    \"111\": \"C9\",\n    \"112\": \"C#9\",\n    \"113\": \"D9\",\n    \"114\": \"D#9\",\n    \"115\": \"E9\",\n    \"116\": \"F9\",\n    \"117\": \"F#9\",\n    \"118\": \"G9\",\n    \"119\": \"G#9\"\n};\nexports.notesDict = notesDict;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/notesDict.ts?");

/***/ }),

/***/ "./src/textConstants.ts":
/*!******************************!*\
  !*** ./src/textConstants.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.textConstants = void 0;\nconst charHeight = 14;\nconst textConstants = {\n    textStyle: \"Consolas\",\n    charHeight: charHeight,\n    charHeightNoPadding: charHeight - 5,\n    charWidth: charHeight * 0.55,\n    xPadding: 4,\n    yPadding: 6,\n};\nexports.textConstants = textConstants;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/textConstants.ts?");

/***/ }),

/***/ "./src/ui_elts/BaseElt.ts":
/*!********************************!*\
  !*** ./src/ui_elts/BaseElt.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BaseElt = void 0;\nconst Rect_1 = __webpack_require__(/*! ../Rect */ \"./src/Rect.ts\");\nclass BaseElt {\n    constructor(gfx, rect) {\n        this.rect = new Rect_1.Rect();\n        this.children = [];\n        this.parent = null;\n        this.gfx = gfx;\n        this.rect = rect;\n    }\n    onDraw() {\n        for (const child of this.children) {\n            child.onDraw();\n        }\n    }\n    onLeftMBDown(x, y) { }\n    onKeyDown(key) {\n        for (const child of this.children) {\n            child.onKeyDown(key);\n        }\n    }\n    pushChild(child) {\n        this.children.push(child);\n    }\n    clearChildren() {\n        this.children = [];\n    }\n}\nexports.BaseElt = BaseElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/BaseElt.ts?");

/***/ }),

/***/ "./src/ui_elts/CellElt.ts":
/*!********************************!*\
  !*** ./src/ui_elts/CellElt.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CellElt = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nconst TextElt_1 = __webpack_require__(/*! ./TextElt */ \"./src/ui_elts/TextElt.ts\");\nconst FretboardModel_1 = __webpack_require__(/*! ../FretboardModel */ \"./src/FretboardModel.ts\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nconst textConstants_1 = __webpack_require__(/*! ../textConstants */ \"./src/textConstants.ts\");\nclass CellElt extends BaseElt_1.BaseElt {\n    constructor(gfx, rect, state, fretboardModel, row, col, cells, onClick = (x, y) => { }, outlineVisible = true) {\n        super(gfx, rect);\n        this.toggled = false;\n        this.passiveColor = constants_1.constants.white;\n        this.activeColor = constants_1.constants.lightBlue;\n        this.state = state;\n        this.fretboardModel = fretboardModel;\n        this.row = row;\n        this.col = col;\n        this.cells = cells;\n        this.onClick = onClick;\n        this.outlineVisible = outlineVisible;\n        const noteString = this.fretboardModel.getCell(this.row, this.col).noteString;\n        const xOffset = (noteString.length === 1) ? 14 : 10;\n        const yOffset = 5;\n        this.textElt = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x + xOffset,\n            y: this.rect.y + yOffset,\n            w: 1,\n            h: 1\n        }, noteString, textConstants_1.textConstants.charHeight, constants_1.constants.white, 3);\n    }\n    setRelativeModeText() {\n        const curNote = this.fretboardModel.strangFretToNote(this.row, this.col);\n        const selectedNote = this.fretboardModel.strangFretToNote(this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n        let delta = (curNote - selectedNote) % 12;\n        if (delta < 0) {\n            delta = 12 + delta;\n        }\n        this.textElt.setText(String(delta));\n        this.updateRect();\n    }\n    setAbsoluteModeText() {\n        this.textElt.setText(this.fretboardModel.getCell(this.row, this.col).noteString);\n        this.updateRect();\n    }\n    updateRect() {\n        const newText = this.textElt.text;\n        const xOffset = (newText.length === 1) ? 14 : 10;\n        const yOffset = 5;\n        this.textElt.setRect({\n            x: this.rect.x + xOffset,\n            y: this.rect.y + yOffset,\n            w: 1,\n            h: 1\n        });\n    }\n    onDraw() {\n        const cell = this.fretboardModel.getCell(this.row, this.col);\n        if (cell.toggled) {\n            this.gfx.drawFilledCircle({\n                x: this.rect.x + (this.rect.w / 2),\n                y: this.rect.y + (this.rect.h / 2)\n            }, (this.rect.h / 2) - 2, 0, cell.color);\n            this.textElt.onDraw();\n            if (cell.ring) {\n                this.gfx.drawOutlinedCircle({\n                    x: this.rect.x + (this.rect.w / 2),\n                    y: this.rect.y + (this.rect.h / 2)\n                }, (this.rect.h / 2) - 5, // radius\n                2, // line width\n                3, // z\n                constants_1.constants.white // color\n                );\n            }\n        }\n        if (this.fretboardModel.isSecondaryCursor(this.row, this.col)) {\n            this.gfx.drawOutlinedCircle({\n                x: this.rect.x + (this.rect.w / 2),\n                y: this.rect.y + (this.rect.h / 2)\n            }, (this.rect.h / 2) - 2, // radius\n            4, // line width\n            1, // z\n            constants_1.constants.lightGreen // color\n            );\n        }\n        if (this.fretboardModel.isSelected(this.row, this.col)) {\n            this.gfx.drawOutlinedCircle({\n                x: this.rect.x + (this.rect.w / 2),\n                y: this.rect.y + (this.rect.h / 2)\n            }, (this.rect.h / 2) - 2, // radius\n            4, // line width\n            1, // z\n            constants_1.constants.lightBlue // color\n            );\n        }\n        // this is only for debugging:\n        if (this.outlineVisible) {\n            this.gfx.strokeRectHeavy(this.rect);\n        }\n    }\n    onLeftMBDown(x, y) {\n        if (this.state.keyboard.control) {\n            this.fretboardModel.setSecondaryCursor(this.row, this.col);\n        }\n        else {\n            if (!this.state.keyboard.shift) {\n                this.fretboardModel.setToggle(this.row, this.col);\n            }\n            this.fretboardModel.setSelected(this.row, this.col);\n            if (this.fretboardModel.getAbsoluteRelativeMode() === FretboardModel_1.AbsoluteRelativeMode.Relative) {\n                for (const row of this.cells) {\n                    for (const cell of row) {\n                        cell.setRelativeModeText();\n                    }\n                }\n            }\n        }\n    }\n}\nexports.CellElt = CellElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/CellElt.ts?");

/***/ }),

/***/ "./src/ui_elts/DoubleDotElt.ts":
/*!*************************************!*\
  !*** ./src/ui_elts/DoubleDotElt.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DoubleDotElt = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nclass DoubleDotElt extends BaseElt_1.BaseElt {\n    constructor(gfx, rect) {\n        super(gfx, rect);\n        this.radius = 4;\n        const third = Math.floor(this.rect.w / 3);\n        this.coord1 = {\n            x: this.rect.x + third,\n            y: this.rect.y + Math.floor(this.rect.h / 2)\n        };\n        this.coord2 = {\n            x: this.rect.x + (2 * third),\n            y: this.rect.y + Math.floor(this.rect.h / 2)\n        };\n    }\n    onDraw() {\n        this.gfx.drawFilledCircle(this.coord1, this.radius);\n        this.gfx.drawFilledCircle(this.coord2, this.radius);\n    }\n}\nexports.DoubleDotElt = DoubleDotElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/DoubleDotElt.ts?");

/***/ }),

/***/ "./src/ui_elts/FlashcardsGameElt.ts":
/*!******************************************!*\
  !*** ./src/ui_elts/FlashcardsGameElt.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FlashcardsGameElt = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nconst TextElt_1 = __webpack_require__(/*! ./TextElt */ \"./src/ui_elts/TextElt.ts\");\nconst util_1 = __webpack_require__(/*! ../util */ \"./src/util.ts\");\nclass Flashcard {\n    constructor(text1, text2) {\n        this.flipped = false;\n        this.text1 = text1;\n        this.text2 = text2;\n    }\n    getText() {\n        return !this.flipped ? this.text1 : this.text2;\n    }\n    flip() {\n        this.flipped = !this.flipped;\n    }\n}\nconst basicTriads = [\n    new Flashcard(\"A\", \"A C E\"),\n    new Flashcard(\"B\", \"B D F\"),\n    new Flashcard(\"C\", \"C E G\"),\n    new Flashcard(\"D\", \"D F A\"),\n    new Flashcard(\"E\", \"E G B\"),\n    new Flashcard(\"F\", \"F A C\"),\n    new Flashcard(\"G\", \"G B D\"),\n];\nconst majorKeySharpsFlats = [\n    // new Flashcard(\"C major\", \"n/a\"),\n    new Flashcard(\"G major\", \"F#\"),\n    new Flashcard(\"D major\", \"F# C#\"),\n    new Flashcard(\"A major\", \"F# C# G#\"),\n    new Flashcard(\"E major\", \"F# C# G# D#\"),\n    // new Flashcard(\"B major\", \"F# C# G# D# A#\"),\n    new Flashcard(\"F major\", \"Bb\"),\n    new Flashcard(\"Bb major\", \"Bb Eb\"),\n    new Flashcard(\"Eb major\", \"Bb Eb Ab\"),\n    // new Flashcard(\"Ab major\", \"Bb Eb Ab Db\"),\n    // new Flashcard(\"Db major\", \"Bb Eb Ab Db Gb\"),\n    // new Flashcard(\"Gb major\", \"Bb Eb Ab Db Gb Cb\"),\n];\nclass FlashcardsGameElt extends BaseElt_1.BaseElt {\n    constructor(gfx, rect) {\n        super(gfx, rect);\n        this.tickRef = null;\n        this.tickTime = 2900; // milliseconds\n        this.timerOn = false;\n        this.flashcards = [];\n        this.textSize = 82;\n        this.curFlashCardIdx = 0;\n        this.flashcards = basicTriads;\n        this.flashcardTextElt = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x,\n            y: this.rect.y,\n            w: this.rect.w,\n            h: this.rect.h\n        }, this.getCurFlashcard().getText(), this.textSize);\n        this.pushChild(this.flashcardTextElt);\n    }\n    update() {\n        let f = this.getCurFlashcard();\n        if (!f.flipped) {\n            f.flip();\n        }\n        else {\n            f.flip();\n            this.getNextFlashcard();\n            f = this.getCurFlashcard();\n        }\n        this.flashcardTextElt.setText(f.getText());\n    }\n    getFlashcardIdx() {\n        let i = (0, util_1.getRandomInt)(this.flashcards.length);\n        while (i === this.curFlashCardIdx) {\n            i = (0, util_1.getRandomInt)(this.flashcards.length);\n        }\n        return i;\n    }\n    getCurFlashcard() {\n        return this.flashcards[this.curFlashCardIdx];\n    }\n    getNextFlashcard() {\n        this.curFlashCardIdx = this.getFlashcardIdx();\n    }\n    onKeyDown(key) {\n        if (key === \"space\") {\n            this.update();\n        }\n        if (key === \"t\") {\n            if (!this.timerOn) {\n                this.tickRef = setInterval(() => this.tick(), this.tickTime);\n            }\n            else {\n                clearInterval(this.tickRef);\n            }\n            this.timerOn = !this.timerOn;\n        }\n    }\n    tick() {\n        this.update();\n    }\n}\nexports.FlashcardsGameElt = FlashcardsGameElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/FlashcardsGameElt.ts?");

/***/ }),

/***/ "./src/ui_elts/FretboardElt.ts":
/*!*************************************!*\
  !*** ./src/ui_elts/FretboardElt.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FretboardElt = void 0;\nconst FretboardModel_1 = __webpack_require__(/*! ../FretboardModel */ \"./src/FretboardModel.ts\");\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nconst CellElt_1 = __webpack_require__(/*! ./CellElt */ \"./src/ui_elts/CellElt.ts\");\nconst LineElt_1 = __webpack_require__(/*! ./LineElt */ \"./src/ui_elts/LineElt.ts\");\nconst SingleDotElt_1 = __webpack_require__(/*! ./SingleDotElt */ \"./src/ui_elts/SingleDotElt.ts\");\nconst DoubleDotElt_1 = __webpack_require__(/*! ./DoubleDotElt */ \"./src/ui_elts/DoubleDotElt.ts\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nclass FretboardElt extends BaseElt_1.BaseElt {\n    constructor(gfx, rect, state, numRows, numCols) {\n        super(gfx, rect);\n        this.topPadding = 20;\n        this.cellW = 36;\n        this.cellH = 30;\n        this.rect = {\n            x: rect.x,\n            y: rect.y,\n            w: this.cellW * numCols,\n            h: this.cellH * numRows + this.topPadding,\n        };\n        this.fretboardX = this.rect.x;\n        this.fretboardY = this.rect.y + this.topPadding;\n        this.state = state;\n        this.numRows = numRows;\n        this.numCols = numCols;\n        this.cells = [];\n        this.fretboardModel = new FretboardModel_1.FretboardModel(this.numRows, this.numCols);\n        // create cells\n        for (let row = 0; row < numRows; row++) {\n            this.cells.push([]);\n            for (let col = 0; col < numCols; col++) {\n                const newCell = new CellElt_1.CellElt(this.gfx, {\n                    x: this.fretboardX + (this.cellW * col),\n                    y: this.fretboardY + (this.cellH * row),\n                    w: this.cellW,\n                    h: this.cellH,\n                    color: constants_1.constants.lightBlue,\n                }, this.state, this.fretboardModel, row, col, this.cells, () => { }, false);\n                this.children.push(newCell);\n                this.cells[row].push(newCell);\n            }\n        }\n        // create strings\n        for (let i = 0; i < numRows; i++) {\n            this.children.push(new LineElt_1.LineElt(this.gfx, {\n                x: this.fretboardX,\n                y: this.fretboardY + (this.cellH * i) + (0.5 * this.cellH)\n            }, {\n                x: this.fretboardX + (this.cellW * this.numCols),\n                y: this.fretboardY + (this.cellH * i) + (0.5 * this.cellH)\n            }));\n        }\n        // create frets\n        for (let i = 0; i < numCols + 1; i++) {\n            this.children.push(new LineElt_1.LineElt(this.gfx, {\n                x: this.fretboardX + (this.cellW * i),\n                y: this.fretboardY + (0.5 * this.cellH)\n            }, {\n                x: this.fretboardX + (this.cellW * i),\n                y: this.fretboardY + (this.cellH * this.numRows) - (0.5 * this.cellH)\n            }));\n        }\n        // create fretboard dots\n        const singleDotPositions = [2, 4, 6, 8, 14, 16, 18, 20];\n        const doubleDotPosition = 11;\n        const dotRectW = this.cellW;\n        const dotRectH = this.fretboardY - this.rect.y;\n        for (let col = 0; col < numCols; col++) {\n            if (singleDotPositions.includes(col)) {\n                this.children.push(new SingleDotElt_1.SingleDotElt(this.gfx, {\n                    x: this.rect.x + (dotRectW * col),\n                    y: this.rect.y,\n                    w: dotRectW,\n                    h: dotRectH\n                }));\n            }\n            if (col === doubleDotPosition) {\n                this.children.push(new DoubleDotElt_1.DoubleDotElt(this.gfx, {\n                    x: this.rect.x + (dotRectW * col),\n                    y: this.rect.y,\n                    w: dotRectW,\n                    h: dotRectH\n                }));\n            }\n        }\n    }\n    onKeyDown(key) {\n        if (key === \"space\") {\n            if (this.fretboardModel.selected) {\n                this.fretboardModel.setToggle(this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n            }\n        }\n        if (key === \"escape\") {\n            this.fretboardModel.unselect();\n        }\n        if (key === \"q\" && this.state.keyboard.control) {\n            this.fretboardModel.untoggleAll();\n        }\n        // global/local mode ////////////////////////////////////\n        if (key === \"g\") {\n            this.fretboardModel.toggleGlobalLocalMode();\n        }\n        if (key === \"a\") {\n            this.fretboardModel.toggleAbsoluteRelativeMode();\n            if (this.fretboardModel.getAbsoluteRelativeMode() === FretboardModel_1.AbsoluteRelativeMode.Relative) {\n                for (const row of this.cells) {\n                    for (const cell of row) {\n                        cell.setRelativeModeText();\n                    }\n                }\n            }\n            else if (this.fretboardModel.getAbsoluteRelativeMode() === FretboardModel_1.AbsoluteRelativeMode.Absolute) {\n                for (const row of this.cells) {\n                    for (const cell of row) {\n                        cell.setAbsoluteModeText();\n                    }\n                }\n            }\n        }\n        // colors ///////////////////////////////////////////////////\n        if (key === \"1\") {\n            const color = constants_1.constants.red;\n            if (this.state.keyboard.control) {\n                this.fretboardModel.setColorAllToggled(color);\n            }\n            else {\n                this.fretboardModel.setColor(color, this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n            }\n        }\n        if (key === \"2\") {\n            const color = constants_1.constants.green;\n            if (this.state.keyboard.control) {\n                this.fretboardModel.setColorAllToggled(color);\n            }\n            else {\n                this.fretboardModel.setColor(color, this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n            }\n        }\n        if (key === \"3\") {\n            const color = constants_1.constants.blue;\n            if (this.state.keyboard.control) {\n                this.fretboardModel.setColorAllToggled(color);\n            }\n            else {\n                this.fretboardModel.setColor(color, this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n            }\n        }\n        if (key === \"4\") {\n            const color = constants_1.constants.gray;\n            if (this.state.keyboard.control) {\n                this.fretboardModel.setColorAllToggled(color);\n            }\n            else {\n                this.fretboardModel.setColor(color, this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n            }\n        }\n        if (key === \"0\" || key === \"`\") {\n            const color = constants_1.constants.black;\n            if (this.state.keyboard.control) {\n                this.fretboardModel.setColorAllToggled(color);\n            }\n            else {\n                this.fretboardModel.setColor(color, this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n            }\n        }\n        /////////////////////////////////////////////////////////////\n        if (key === \"r\") {\n            this.fretboardModel.setRing(this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n        }\n        if (isArrowKey(key)) {\n            const dir = arrowKeyToDir(key);\n            // TODO: get rid of moveToggle(), moveToggleByOctave(), and moveToggleByString()?\n            // currently they don't work with relative mode\n            // not sure if they're useful enough to keep\n            if (this.state.keyboard.shift) {\n                this.fretboardModel.moveToggle(dir, this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n            }\n            else if (this.state.keyboard.control) {\n                if (dir === FretboardModel_1.Dir.Right || dir === FretboardModel_1.Dir.Left) {\n                    this.fretboardModel.moveToggleByOctave(dir, this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n                }\n                else if (dir === FretboardModel_1.Dir.Up || dir === FretboardModel_1.Dir.Down) {\n                    this.fretboardModel.moveToggleByString(dir, this.fretboardModel.selectedRow, this.fretboardModel.selectedCol);\n                }\n            }\n            else {\n                this.fretboardModel.moveSelected(dir);\n                if (this.fretboardModel.getAbsoluteRelativeMode() === FretboardModel_1.AbsoluteRelativeMode.Relative) {\n                    for (const row of this.cells) {\n                        for (const cell of row) {\n                            cell.setRelativeModeText();\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nexports.FretboardElt = FretboardElt;\nfunction isArrowKey(key) {\n    return (key === \"arrowup\"\n        || key === \"arrowdown\"\n        || key === \"arrowleft\"\n        || key === \"arrowright\");\n}\nfunction arrowKeyToDir(key) {\n    switch (key) {\n        case \"arrowup\":\n            return FretboardModel_1.Dir.Up;\n        case \"arrowdown\":\n            return FretboardModel_1.Dir.Down;\n        case \"arrowleft\":\n            return FretboardModel_1.Dir.Left;\n        case \"arrowright\":\n            return FretboardModel_1.Dir.Right;\n        default:\n            return FretboardModel_1.Dir.Up;\n    }\n}\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/FretboardElt.ts?");

/***/ }),

/***/ "./src/ui_elts/IntervalsGameElt.ts":
/*!*****************************************!*\
  !*** ./src/ui_elts/IntervalsGameElt.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.IntervalsGameElt = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nconst TextElt_1 = __webpack_require__(/*! ./TextElt */ \"./src/ui_elts/TextElt.ts\");\nconst util_1 = __webpack_require__(/*! ../util */ \"./src/util.ts\");\nclass Interval {\n    constructor() {\n        this.strang = \"\";\n        this.interval = \"\";\n        this.direction = \"\";\n        this.numStrangs = \"\";\n    }\n}\n;\nclass IntervalsGameElt extends BaseElt_1.BaseElt {\n    constructor(gfx, rect) {\n        super(gfx, rect);\n        this.textSize = 82;\n        this.textPadding = 16;\n        this.tickRef = null;\n        this.tickTime = 5000; // milliseconds\n        this.timerOn = false;\n        this.notes = [\n            \"A\",\n            \"B\",\n            \"C\",\n            \"D\",\n            \"E\",\n            \"F\",\n            \"G\",\n        ];\n        this.octavesUp = [\n            // { strang: \"low E\", interval: \"octave\", direction: \"up\", numStrangs: \"one\" },\n            { strang: \"low E\", interval: \"octave\", direction: \"up\", numStrangs: \"two\" },\n            { strang: \"low E\", interval: \"octave\", direction: \"up\", numStrangs: \"three\" },\n            // { strang: \"A\",     interval: \"octave\", direction: \"up\", numStrangs: \"one\" },\n            { strang: \"A\", interval: \"octave\", direction: \"up\", numStrangs: \"two\" },\n            { strang: \"A\", interval: \"octave\", direction: \"up\", numStrangs: \"three\" },\n            // { strang: \"D\",     interval: \"octave\", direction: \"up\", numStrangs: \"one\" },\n            { strang: \"D\", interval: \"octave\", direction: \"up\", numStrangs: \"two\" },\n            { strang: \"D\", interval: \"octave\", direction: \"up\", numStrangs: \"three\" },\n            // { strang: \"G\",     interval: \"octave\", direction: \"up\", numStrangs: \"one\" },\n            { strang: \"G\", interval: \"octave\", direction: \"up\", numStrangs: \"two\" },\n            // { strang: \"B\",     interval: \"octave\", direction: \"up\", numStrangs: \"one\" },\n        ];\n        this.octavesDown = [\n            // { strang: \"A\",      interval: \"octave\", direction: \"down\", numStrangs: \"one\" },\n            // { strang: \"D\",      interval: \"octave\", direction: \"down\", numStrangs: \"one\" },\n            { strang: \"D\", interval: \"octave\", direction: \"down\", numStrangs: \"two\" },\n            // { strang: \"G\",      interval: \"octave\", direction: \"down\", numStrangs: \"one\" },\n            { strang: \"G\", interval: \"octave\", direction: \"down\", numStrangs: \"two\" },\n            { strang: \"G\", interval: \"octave\", direction: \"down\", numStrangs: \"three\" },\n            // { strang: \"B\",      interval: \"octave\", direction: \"down\", numStrangs: \"one\" },\n            { strang: \"B\", interval: \"octave\", direction: \"down\", numStrangs: \"two\" },\n            { strang: \"B\", interval: \"octave\", direction: \"down\", numStrangs: \"three\" },\n            // { strang: \"high E\", interval: \"octave\", direction: \"down\", numStrangs: \"one\" },\n            { strang: \"high E\", interval: \"octave\", direction: \"down\", numStrangs: \"two\" },\n            { strang: \"high E\", interval: \"octave\", direction: \"down\", numStrangs: \"three\" },\n        ];\n        this.octaves = [...this.octavesUp, ...this.octavesDown];\n        this.line1 = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x,\n            y: this.rect.y,\n            w: this.rect.w,\n            h: this.rect.h\n        }, \"\", this.textSize);\n        this.line2 = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x,\n            y: this.rect.y + this.textSize + this.textPadding,\n            w: this.rect.w,\n            h: this.rect.h\n        }, \"\", this.textSize);\n        this.line3 = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x,\n            y: this.rect.y + ((this.textSize + this.textPadding) * 2),\n            w: this.rect.w,\n            h: this.rect.h\n        }, \"\", this.textSize);\n        this.line4 = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x,\n            y: this.rect.y + ((this.textSize + this.textPadding) * 3),\n            w: this.rect.w,\n            h: this.rect.h\n        }, \"\", this.textSize);\n        this.pushChild(this.line1);\n        this.pushChild(this.line2);\n        this.pushChild(this.line3);\n        this.pushChild(this.line4);\n        this.update();\n    }\n    onKeyDown(key) {\n        if (key === \"space\") {\n            // clearInterval(this.tickRef);\n            // this.tickRef = setInterval(() => this.tick(), this.tickTime);\n            this.update();\n            // this.timerOn = true;\n        }\n        if (key === \"t\") {\n            if (!this.timerOn) {\n                this.tickRef = setInterval(() => this.tick(), this.tickTime);\n            }\n            else {\n                clearInterval(this.tickRef);\n            }\n            this.timerOn = !this.timerOn;\n        }\n    }\n    tick() {\n        this.update();\n    }\n    update() {\n        const r1 = (0, util_1.getRandomInt)(this.octaves.length);\n        const r2 = (0, util_1.getRandomInt)(this.notes.length);\n        const interval = this.octaves[r1];\n        const note = this.notes[r2];\n        const strs = this.makeStrings(interval, note);\n        this.line1.setText(strs.line1);\n        this.line2.setText(strs.line2);\n        this.line3.setText(strs.line3);\n        this.line4.setText(strs.line4);\n    }\n    makeStrings(obj, note) {\n        const s = obj.numStrangs === \"one\" ? \"\" : \"s\";\n        return {\n            line1: `string:    ${obj.strang}`,\n            line2: `note:      ${note}`,\n            line3: `interval:  ${obj.interval}`,\n            line4: `direction: ${obj.numStrangs} string${s} ${obj.direction}`,\n        };\n    }\n}\nexports.IntervalsGameElt = IntervalsGameElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/IntervalsGameElt.ts?");

/***/ }),

/***/ "./src/ui_elts/LineElt.ts":
/*!********************************!*\
  !*** ./src/ui_elts/LineElt.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LineElt = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nclass LineElt extends BaseElt_1.BaseElt {\n    constructor(gfx, beginCoord, endCoord) {\n        super(gfx, { x: 0, y: 0, w: 0, h: 0 });\n        this.beginCoord = beginCoord;\n        this.endCoord = endCoord;\n    }\n    onDraw() {\n        this.gfx.drawLineHeavy(this.beginCoord, this.endCoord);\n    }\n}\nexports.LineElt = LineElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/LineElt.ts?");

/***/ }),

/***/ "./src/ui_elts/NoteStringGameElt.ts":
/*!******************************************!*\
  !*** ./src/ui_elts/NoteStringGameElt.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoteStringGameElt = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nconst TextElt_1 = __webpack_require__(/*! ./TextElt */ \"./src/ui_elts/TextElt.ts\");\nconst util_1 = __webpack_require__(/*! ../util */ \"./src/util.ts\");\nclass NoteStringGameElt extends BaseElt_1.BaseElt {\n    // notes: Array<string> = [\n    //     \"Ab\",\n    //     \"A\",\n    //     \"A#\",\n    //     \"Bb\",\n    //     \"B\",\n    //     \"C\",\n    //     \"C#\",\n    //     \"Db\",\n    //     \"D\",\n    //     \"D#\",\n    //     \"Eb\",\n    //     \"E\",\n    //     \"F\",\n    //     \"F#\",\n    //     \"Gb\",\n    //     \"G\",\n    //     \"G#\",\n    // ];\n    constructor(gfx, rect) {\n        super(gfx, rect);\n        this.textSize = 82;\n        this.textPadding = 16;\n        this.strang = \"\";\n        this.note = \"\";\n        this.tickRef = null;\n        this.tickTime = 2300; // milliseconds\n        this.timerOn = false;\n        this.prevR1 = 0;\n        this.prevR2 = 0;\n        this.strangs = [\n            \"low E\",\n            \"A\",\n            \"D\",\n            \"G\",\n            \"B\",\n            \"high E\",\n        ];\n        // higher number == more probability that this string will be chosen\n        // strangWeights: Array<number> = [\n        //     1,\n        //     1,\n        //     6,\n        //     6,\n        //     3,\n        //     1\n        // ];\n        this.strangWeights = [\n            0,\n            1,\n            1,\n            1,\n            1,\n            0\n        ];\n        this.strangWeightRanges = [];\n        this.strangWeightsTotal = 0;\n        this.notes = [\n            \"A\",\n            \"B\",\n            \"C\",\n            \"D\",\n            \"E\",\n            \"F\",\n            \"G\",\n        ];\n        this.initStrangWeights();\n        this.stringElt = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x,\n            y: this.rect.y,\n            w: this.rect.w,\n            h: this.rect.h\n        }, \"\", this.textSize);\n        this.noteElt = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x,\n            y: this.rect.y + this.textSize + this.textPadding,\n            w: this.rect.w,\n            h: this.rect.h\n        }, \"\", this.textSize);\n        this.pushChild(this.stringElt);\n        this.pushChild(this.noteElt);\n        this.update();\n    }\n    initStrangWeights() {\n        for (const w of this.strangWeights) {\n            this.strangWeightsTotal += w;\n            this.strangWeightRanges.push(this.strangWeightsTotal);\n        }\n    }\n    onKeyDown(key) {\n        if (key === \"space\") {\n            this.update();\n        }\n        if (key === \"t\") {\n            if (!this.timerOn) {\n                this.tickRef = setInterval(() => this.tick(), this.tickTime);\n            }\n            else {\n                clearInterval(this.tickRef);\n            }\n            this.timerOn = !this.timerOn;\n        }\n    }\n    tick() {\n        this.update();\n    }\n    update() {\n        let r1 = this.getStrangIdx();\n        let r2 = (0, util_1.getRandomInt)(this.notes.length);\n        // don't repeat same r1 and r2 twice in a row:\n        while (r1 === this.prevR1 && r2 === this.prevR2) {\n            r1 = this.getStrangIdx();\n            r2 = (0, util_1.getRandomInt)(this.notes.length);\n        }\n        this.prevR1 = r1;\n        this.prevR2 = r2;\n        this.stringElt.setText(`string: ${this.strangs[r1]}`);\n        this.noteElt.setText(`note:   ${this.notes[r2]}`);\n    }\n    getStrangIdx() {\n        const r = (0, util_1.getRandomInt)(this.strangWeightsTotal);\n        for (let i = 0; i < this.strangWeightRanges.length; i++) {\n            if (r < this.strangWeightRanges[i]) {\n                return i;\n            }\n        }\n        return 0;\n    }\n}\nexports.NoteStringGameElt = NoteStringGameElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/NoteStringGameElt.ts?");

/***/ }),

/***/ "./src/ui_elts/NotesSemitoneGameElt.ts":
/*!*********************************************!*\
  !*** ./src/ui_elts/NotesSemitoneGameElt.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NotesSemitoneGameElt = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nconst TextElt_1 = __webpack_require__(/*! ./TextElt */ \"./src/ui_elts/TextElt.ts\");\nconst util_1 = __webpack_require__(/*! ../util */ \"./src/util.ts\");\nclass Note {\n    constructor(noteName, noteNum) {\n        this.noteName = noteName;\n        this.noteNum = noteNum;\n    }\n}\nconst notes = [\n    new Note(\"A\", 0),\n    new Note(\"B\", 2),\n    new Note(\"C\", 3),\n    new Note(\"D\", 5),\n    new Note(\"E\", 7),\n    new Note(\"F\", 8),\n    new Note(\"G\", 10),\n];\nfunction modAddition(a, b, m) {\n    let res = b - a;\n    if (res < 0) {\n        res = m + res;\n    }\n    return res;\n}\nclass NotesSemitoneGameElt extends BaseElt_1.BaseElt {\n    constructor(gfx, rect) {\n        super(gfx, rect);\n        this.tickRef = null;\n        this.tickTime = 2900; // milliseconds\n        this.timerOn = false;\n        this.textSize = 82;\n        this.flipped = false;\n        this.curText = \"\";\n        this.i1 = 0;\n        this.i2 = 0;\n        this.textElt = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x,\n            y: this.rect.y,\n            w: this.rect.w,\n            h: this.rect.h\n        }, this.curText, this.textSize);\n        this.pushChild(this.textElt);\n        this.i1 = (0, util_1.getRandomInt)(notes.length);\n        this.i2 = (0, util_1.getRandomInt)(notes.length);\n        while (this.i1 === this.i2) {\n            this.i2 = (0, util_1.getRandomInt)(notes.length);\n        }\n        this.curText = `${notes[this.i1].noteName} ${notes[this.i2].noteName}`;\n        this.textElt.setText(this.curText);\n    }\n    update() {\n        if (this.flipped === false) {\n            this.flipped = true;\n            let res = modAddition(notes[this.i1].noteNum, notes[this.i2].noteNum, 12);\n            this.curText = String(res);\n        }\n        else {\n            this.i1 = (0, util_1.getRandomInt)(notes.length);\n            this.i2 = (0, util_1.getRandomInt)(notes.length);\n            while (this.i1 === this.i2) {\n                this.i2 = (0, util_1.getRandomInt)(notes.length);\n            }\n            this.flipped = false;\n            this.curText = `${notes[this.i1].noteName} ${notes[this.i2].noteName}`;\n        }\n        this.textElt.setText(this.curText);\n    }\n    onKeyDown(key) {\n        if (key === \"space\") {\n            this.update();\n        }\n    }\n}\nexports.NotesSemitoneGameElt = NotesSemitoneGameElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/NotesSemitoneGameElt.ts?");

/***/ }),

/***/ "./src/ui_elts/SingleDotElt.ts":
/*!*************************************!*\
  !*** ./src/ui_elts/SingleDotElt.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SingleDotElt = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nclass SingleDotElt extends BaseElt_1.BaseElt {\n    constructor(gfx, rect) {\n        super(gfx, rect);\n        this.radius = 4;\n        this.coord = {\n            x: this.rect.x + Math.floor(this.rect.w / 2),\n            y: this.rect.y + Math.floor(this.rect.h / 2)\n        };\n    }\n    onDraw() {\n        this.gfx.drawFilledCircle(this.coord, this.radius);\n    }\n}\nexports.SingleDotElt = SingleDotElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/SingleDotElt.ts?");

/***/ }),

/***/ "./src/ui_elts/StringFretGameElt.ts":
/*!******************************************!*\
  !*** ./src/ui_elts/StringFretGameElt.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StringFretGameElt = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nconst TextElt_1 = __webpack_require__(/*! ./TextElt */ \"./src/ui_elts/TextElt.ts\");\nconst util_1 = __webpack_require__(/*! ../util */ \"./src/util.ts\");\nclass StringFretGameElt extends BaseElt_1.BaseElt {\n    constructor(gfx, rect) {\n        super(gfx, rect);\n        this.textSize = 82;\n        this.textPadding = 16;\n        this.strang = \"\";\n        this.note = \"\";\n        this.tickRef = null;\n        this.tickTime = 2900; // milliseconds\n        this.timerOn = false;\n        this.prevR1 = 0;\n        this.prevR2 = 0;\n        this.lowFret = 1; // lowest fret inclusive\n        this.highFret = 11; // highest fret inclusive\n        this.numFrets = (this.highFret + 1) - this.lowFret;\n        this.strangs = [\n            \"low E\",\n            \"A\",\n            \"D\",\n            \"G\",\n            \"B\",\n            \"high E\",\n        ];\n        // higher number == more probability that this string will be chosen\n        this.strangWeights = [\n            1,\n            1,\n            6,\n            6,\n            3,\n            1\n        ];\n        this.strangWeightRanges = [];\n        this.strangWeightsTotal = 0;\n        this.initStrangWeights();\n        this.stringElt = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x,\n            y: this.rect.y,\n            w: this.rect.w,\n            h: this.rect.h\n        }, \"\", this.textSize);\n        this.fretElt = new TextElt_1.TextElt(this.gfx, {\n            x: this.rect.x,\n            y: this.rect.y + this.textSize + this.textPadding,\n            w: this.rect.w,\n            h: this.rect.h\n        }, \"\", this.textSize);\n        this.pushChild(this.stringElt);\n        this.pushChild(this.fretElt);\n        this.update();\n    }\n    initStrangWeights() {\n        for (const w of this.strangWeights) {\n            this.strangWeightsTotal += w;\n            this.strangWeightRanges.push(this.strangWeightsTotal);\n        }\n    }\n    onKeyDown(key) {\n        if (key === \"space\") {\n            this.update();\n        }\n        if (key === \"t\") {\n            if (!this.timerOn) {\n                this.tickRef = setInterval(() => this.tick(), this.tickTime);\n            }\n            else {\n                clearInterval(this.tickRef);\n            }\n            this.timerOn = !this.timerOn;\n        }\n    }\n    tick() {\n        this.update();\n    }\n    update() {\n        let r1 = this.getStrangIdx();\n        let r2 = this.getFret();\n        // don't repeat same r1 and r2 twice in a row:\n        while (r1 === this.prevR1 && r2 === this.prevR2) {\n            r1 = this.getStrangIdx();\n            r2 = this.getFret();\n        }\n        this.prevR1 = r1;\n        this.prevR2 = r2;\n        this.stringElt.setText(`string: ${this.strangs[r1]}`);\n        this.fretElt.setText(`fret:   ${r2}`);\n    }\n    getStrangIdx() {\n        const r = (0, util_1.getRandomInt)(this.strangWeightsTotal);\n        for (let i = 0; i < this.strangWeightRanges.length; i++) {\n            if (r < this.strangWeightRanges[i]) {\n                return i;\n            }\n        }\n        return 0;\n    }\n    getFret() {\n        return (0, util_1.getRandomInt)(this.numFrets) + this.lowFret;\n    }\n}\nexports.StringFretGameElt = StringFretGameElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/StringFretGameElt.ts?");

/***/ }),

/***/ "./src/ui_elts/TextElt.ts":
/*!********************************!*\
  !*** ./src/ui_elts/TextElt.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TextElt = void 0;\nconst BaseElt_1 = __webpack_require__(/*! ./BaseElt */ \"./src/ui_elts/BaseElt.ts\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"./src/constants.ts\");\nconst textConstants_1 = __webpack_require__(/*! ../textConstants */ \"./src/textConstants.ts\");\nclass TextElt extends BaseElt_1.BaseElt {\n    constructor(gfx, rect, text, size = textConstants_1.textConstants.charHeight, color = constants_1.constants.black, z = 0) {\n        super(gfx, rect);\n        this.text = text;\n        this.size = size;\n        this.color = color;\n        this.z = z;\n    }\n    setText(text) {\n        this.text = text;\n    }\n    setRect(rect) {\n        this.rect = rect;\n    }\n    onDraw() {\n        this.gfx.drawText(this.text, this.size, {\n            x: this.rect.x,\n            y: this.rect.y\n        }, this.color, this.z);\n    }\n}\nexports.TextElt = TextElt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/ui_elts/TextElt.ts?");

/***/ }),

/***/ "./src/util.ts":
/*!*********************!*\
  !*** ./src/util.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getRandomInt = exports.inRange = exports.clamp = exports.addButtonOnClickHandler = exports.addHandler = exports.isInsideRect = void 0;\nfunction isInsideRect(x, y, rect) {\n    return (x >= rect.x\n        && x < (rect.x + rect.w)\n        && y >= rect.y\n        && y < (rect.y + rect.h));\n}\nexports.isInsideRect = isInsideRect;\nfunction addHandler(type, callback, options = {}) {\n    document.addEventListener(type, callback, options);\n}\nexports.addHandler = addHandler;\nfunction addButtonOnClickHandler(id, callback) {\n    let b = document.getElementById(id);\n    if (b) {\n        b.addEventListener(\"click\", callback);\n    }\n}\nexports.addButtonOnClickHandler = addButtonOnClickHandler;\n// clamp val between low inclusive and high exclusive\nfunction clamp(val, low, high) {\n    if (val < low) {\n        return low;\n    }\n    else if (val >= high) {\n        return high - 1;\n    }\n    else {\n        return val;\n    }\n}\nexports.clamp = clamp;\nfunction inRange(val, low, high) {\n    if (val < low) {\n        return false;\n    }\n    else if (val >= high) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nexports.inRange = inRange;\n// get random integer between 0 inclusive and max exclusive\nfunction getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n}\nexports.getRandomInt = getRandomInt;\n\n\n//# sourceURL=webpack://guitar-buddy/./src/util.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;